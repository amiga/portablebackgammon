/*
 * Copyright (c) 2019 Midokura
 */

group 'org.midokura'
version '0.0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'

sourceCompatibility = 1.8

project.ext {
    vendor = "Midokura"
    agent_version = '0.0.1'
    maintainer = "Midokura <info@midokura.com>"
    url = "http://midokura.com"

    versions = [
            commons_io: "2.6",
            commons_lang: "3.7",
            config: "1.3.3",
            findsecbugs: "1.8.0",
            gson: "2.8.5",
            gson_serializers: "1.1.1",
            guava: "23.0",
            guice: "4.2.0",
            jetty: "9.4.11.v20180605",
            jsr305: "3.0.2",
            junit: "5.4.0",
            logback: "1.2.3",
            mockito: "2.18.3",
            owner: "1.0.10",
            reflections: "0.9.11",
            spotbugs: "3.1.5",
    ]

    libraries = [
            commons_io: "commons-io:commons-io:${versions.commons_io}",
            commons_lang: "org.apache.commons:commons-lang3:${versions.commons_lang}",
            config: "com.typesafe:config:${versions.config}",
            findsecbugs: "com.h3xstream.findsecbugs:findsecbugs-plugin:${versions.findsecbugs}",
            gson: "com.google.code.gson:gson:${versions.gson}",
            gson_serializers: "com.fatboyindustrial.gson-javatime-serialisers:gson-javatime-serialisers:${versions.gson_serializers}",
            guava: "com.google.guava:guava:${versions.guava}",
            guice: "com.google.inject:guice:${versions.guice}",
            jetty_server: "org.eclipse.jetty:jetty-server:${versions.jetty}",
            jetty_servlet: "org.eclipse.jetty:jetty-servlet:${versions.jetty}",
            jetty_servlets: "org.eclipse.jetty:jetty-servlets:${versions.jetty}",
            jetty_websocket_client: "org.eclipse.jetty.websocket:websocket-client:${versions.jetty}",
            jetty_websocket_server: "org.eclipse.jetty.websocket:websocket-server:${versions.jetty}",
            jetty_websocket_servlet: "org.eclipse.jetty.websocket:websocket-servlet:${versions.jetty}",
            jsr305: "com.google.code.findbugs:jsr305:${versions.jsr305}",
            junit: "junit:junit:${versions.junit}",
            mockito: "org.mockito:mockito-core:${versions.mockito}",
            owner: "org.aeonbits.owner:owner:${versions.owner}",
            reflections: "org.reflections:reflections:${versions.reflections}",
            spotbugs: "com.github.spotbugs:spotbugs:${versions.spotbugs}",
            testing: ["org.junit.jupiter:junit-jupiter:${versions.junit}",
                      "org.mockito:mockito-core:${versions.mockito}"],
    ]
}

repositories {
    mavenCentral()
}

dependencies {
    compile libraries.owner

    testCompile libraries.testing
}

test {
    useJUnitPlatform()
    testLogging {
        events "started", "passed", "skipped", "failed"
        if (project.hasProperty('consoleTestOutput')) {
            testLogging.showStandardStreams = true
            testLogging.exceptionFormat = 'full'
        }
    }
}

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/" // needed by scoverage/spotbugs
        }
    }
}
mainClassName = "lowlevel.Main"
